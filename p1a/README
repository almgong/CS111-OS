README for lab1a

Nothing particular to say. I did use a reference from the gnu website at:
http://www.gnu.org/software/libc/manual/html_node/Noncanon-Example.html to 
understand and structure my noncanonical and non-echo terminal code.

For part 2, though ambiguous, my program's intended behavior (as I have written
it) is that a ^C will send a SIGINT signal to the shell process, and nothing more.
This is naturally caught later on at a read() call from a thread reading in 
output from the shell, and my program will exit() with return code = 1.

Similarly, a SIGPIPE signal sent to my program, or otherwise generated by a
write() to a pipe with a closed read-end should exit with return code = 1. It
will either be caught by the write() OR by a read() returning 0 bytes, indicating
EOF.

My program only exits with return code = 0 if and only if ^D is typed in the
terminal.

Lastly, the only way that there is an exit code for the shell process is if
the shell exits "normally" and WIFEXITED() returns true. I have confirmed that
typing "exit" with the --shell option passed to lab1 will print the exit status
of 0. However, in cases like inputting ^D or ^C, there is no exit status and
my program will simply log a message saying what caused the child to exit.